#!/bin/bash

# BEGIN_COMMON_COPYRIGHT_HEADER
# (c)LGPL2+
#
#
# Copyright: 2014 Alexander Sokoloff
# Authors:
#   Alexander Sokoloff <sokoloff.a@gmail.com>
#
# This program or library is free software; you can redistribute it
# and/or modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General
# Public License along with this library; if not, write to the
# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301 USA
#
# END_COMMON_COPYRIGHT_HEADER

SCRIPT_VERSION="0.6.0"


function version {
    echo "makeDeb $SCRIPT_VERSION"
    exit
}

function help {
  cat << HELP_TEXT
Usage: makeDeb.sh [options] <spec-file>

Options
  -h|--help             display this message
  -o|--outdirt=DIR      write result to DIR, ./OUT directory by default
  -V|--version          Print program version
HELP_TEXT
}

VARIABLES=""


function error()
{
    echo $1 >&2
    exit 1
}

function debug
{
    [ -z "${DEBUG}" ] && echo "$@" >&2
}

function setVariable
{
    shift
    local VAR=$1
    shift

    VARIABLES="${VARIABLES}${VAR}=$*\n"
    debug "set variable: ${VAR} = $*"
    #debug "variables $VARIABLES"
}

function getVariable
{
    printf "$VARIABLES" | awk -F'=' "/${1}=/ {print(\$2)}"
}

function clearVariables
{
    debug "clear variables: $VARIABLES"
    VARIABLES=''
}

function checkIf
{
    shift
    local name=$1
    shift

    case $name in
        DISTRIB)
            val=`echo $DISTRIB | awk '{print $1 }' | tr '[:lower:]' '[:upper:]'`;
            local caseInsensitive=1;
            ;;

        RELEASE)
            val=`echo $RELEASE | awk '{print $1 }' | tr '[:lower:]' '[:upper:]'`;
            local caseInsensitive=1;
            ;;

        *)
            val=`getVariable ${PROGRAM}`
            ;;
    esac

    for i in $@ ; do
        local a=$i
        [ "$caseInsensitive" ] && a=`echo $i | awk '{print $1 }' | tr '[:lower:]' '[:upper:]'`
        if [ "$a" = "$val" ]; then
            echo 1
            return 1
        fi
    done

    echo 0
}


token=''
line=''
function nextToken
{
    while  IFS='' read -r "line"; do
        token=`echo $line | awk '{print $1 }' | tr '[:lower:]' '[:upper:]'`
        case $token in
            %IF|%IFNOT|%ELSIF|%ELSEIF|%ELSE|%ENDIF|%SET)
                return 0
                ;;

            *)
                echo "$line" | sed            \
                    -e"s/%NAME%/${PROGRAM}/g"    \
                    -e"s/%VERSION%/${VERSION}/g"  \
                    -e"s/%RELEASE%/${RELEASE}/g" \
                    -e"s/%RELEASENUM%/${RELEASENUM}/g" \
                    -e"s/%DISTRIB%/${DISTRIB}/g" \
                    -e"s/%DATE%/${DATE}/g" \
                    -e"s/%DEBEMAIL%/${DEBEMAIL}/g" \
                    -e"s/%DEBFULLNAME%/${DEBFULLNAME}/g"
        esac
    done

    token=''
    return
}



function skipBlock
{
    local level=0
    while  IFS='' read -r "line"; do
        token=`echo $line | awk '{print $1 }' | tr '[:lower:]' '[:upper:]'`
        case $token in
            %IF|%IFNOT)
                let 'level++'
                ;;

            %ENDIF)
                [ $level = "0" ] && break
                let 'level--'
                ;;

            %ELSIF|%ELSEIF|%ELSE)
                [ $level = "0" ] && break
                ;;

            *)
                ;;
        esac
    done
}


function processBlock
{
    nextToken

    while [ "$token" != "" ]; do
        case $token in
            %IF|%IFNOT)
                local skip=
                while [ "$token" != "" ] && [ $token != "%ENDIF" ]; do
                    case $token in
                        %IF|%ELSIF|%ELSEIF)
                            check=$(checkIf $line)
                            ;;

                        %IFNOT)
                            check=$(checkIf $line)
                            check=$(( ! $check ))
                            ;;

                        %ELSE)
                            check=1
                            ;;
                    esac

                    if [ "$skip" != "1" ] && [ "$check" = "1" ]; then
                        processBlock
                        skip=1
                    else
                        skipBlock
                    fi
                done
                ;;

            %SET)
                setVariable $line
                ;;

            %ELSIF|%ELSEIF|%ELSE|%ENDIF)
                break
                ;;

            *)
                echo "Unexpected token '$line'" >&2
                exit 3
                ;;
        esac
        nextToken
    done
}

function prepareFile
{
    processBlock < $1
}


SPEC=""

while [ $# -gt 0 ]; do
  case $1 in
    -h|--help)
        help
        exit
      ;;
    -V|--version)
        version
        exit
      ;;  
    -o|--outdir)
        OUT_DIR=$2;
        shift 2
      ;;


    *)
        SPEC=$1
        shift
      ;;

  esac
done

# Default values --------------------------------
DEB_DIR='debian'
TYPE="source"
SIGN=yes
OUT_DIR="./OUT"
RELEASENUM=1

# Read spec file  -------------------------------
if [ -z "${SPEC}" ]; then
    ls *.spec 2>/dev/null  || error "I can't find .spec file"
    . *.spec 2>/dev/null   || error "I can't load .spec file"
else
    ls ${SPEC} 2>/dev/null || error "I can't find .spec file"
    . ${SPEC} 2>/dev/null  || error "I can't load .spec file"
fi


# Checks ----------------------------------------
DEB_DIR_PATH=$(realpath ${DEB_DIR})
[ -d "${DEB_DIR_PATH}"  ] || error "I can't find debian directory (${DEB_DIR_PATH})!"

[ "${SIGN}" = "no" ] && sign_arg="-uc -us"


case ${TYPE} in
    b*)
        type_arg=""
        ;;

    s*)
        type_arg="-S"
        ;;

    d*)
        type_arg=""
        ;;
esac



TAR_FILE="${PROGRAM}-${VERSION}.tar.gz"
TAR_FILE_PATH=$(realpath ${TAR_FILE})
[ -f "${TAR_FILE_PATH}" ] || error "I'cant find tar file '${TAR_FILE_PATH}'!"


if [ -z "$DEBEMAIL" ]; then
  DEBEMAIL=${EMAIL}
fi

if [ -n "$DEBUG" ]; then
  TYPE="Debug"
fi



DEB_DIR=`readlink -m ${DEB_DIR}`
echo "*******************************"
echo " Tar file:   ${TAR_FILE}"
echo " Debian dir: ${DEB_DIR}"
echo ""
echo " Name:    ${PROGRAM}"
echo " Ver:     ${VERSION}"
echo " Type:    ${TYPE}"
echo " Distrib: ${DISTRIB}"
echo " Release: ${RELEASES}"
echo " Out dir: ${OUT_DIR}"

echo "*******************************"


OUT_DIR=`readlink -m ${OUT_DIR}`
mkdir -p ${OUT_DIR} || exit 2

DIR=${OUT_DIR}/${PROGRAM}-${VERSION}
rm -rf ${DIR}


if [ -z "$DEBUG" ]; then
    cp "${TAR_FILE}" ${OUT_DIR}/${PROGRAM}_${VERSION}.orig.tar.gz || error
    mkdir "${OUT_DIR}/${PROGRAM}-${VERSION}"
    tar xf ${TAR_FILE} --directory="${OUT_DIR}/${PROGRAM}-${VERSION}" --strip 1 || error
fi

eval $(gpg-agent --daemon)

for RELEASE in ${RELEASES}; do
    # Debin directory .....................
    [ -d ${DIR}/debian ] && rm -r ${DIR}/debian
    mkdir -p ${DIR}/debian
    DATE=`date -R`

    clearVariables

    prepareFile ${DEB_DIR}/control > ${DIR}/debian/control

    for src in `find ${DEB_DIR} -type f \! -name "control"`; do
        dest=$(echo $src | sed -e"s|${DEB_DIR}|${DIR}/debian|")
        mkdir -p $(dirname "${dest}")
        prepareFile "${src}" > ${dest}
        chmod --reference "${src}" ${dest}
    done
    # Debin directory .....................

    # Apply patches .......................
    if [ -f "${DIR}/debian/patches/series" ]; then
    	export QUILT_PATCHES=debian/patches
    	cd ${DIR} && quilt push -a || exit 2
    	[ -d "${DIR}" ] && rm -rf ${DIR}/.pc
	fi    	
    # Apply patches .......................


    if [ -z "$DEBUG" ]; then
      cd ${DIR} && debuild ${type_arg} ${sign_arg} -rfakeroot
      ret=$?
      [ $ret -eq 0 ] || exit $ret
    else
      mv ${DIR}/debian ${DIR}/${RELEASE}-debian
    fi
done


if [ "${type_arg}" = '-b' ]; then
    echo "................................."
    echo "Check files:"
    PKGS=`awk '/Package:/ {print $2}' ${DIR}/debian/control`

    for file in `find ${DIR}/debian/tmp \( -type f -o -type l \) 2>/dev/null`; do
        file=`echo $file | sed -e"s|${DIR}/debian/tmp||"`
        #echo $file
        pkgNames=''
        let 'pkgCount=0'

        for pkg in ${PKGS}; do
            if [ `ls "${DIR}/debian/${pkg}$file" 2>/dev/null` ]; then
                let 'pkgCount++'
                pkgNames="${pkgNames}\n\t${pkg}"
            fi
        done

        if [ $pkgCount -eq 0 ]; then
            echo -e "Missing file: ${file}";

        elif [ $pkgCount -gt 1 ]; then
            echo -e "Duplicates:  ${file}$pkgNames"
        fi

    done
fi

echo "dput ppa:${PPA}/ppa *_source.changes" > ${OUT_DIR}/send.sh
chmod a+x ${OUT_DIR}/send.sh

